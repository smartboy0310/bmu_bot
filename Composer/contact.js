const {Composer} = require('telegraf')

const composer = new Composer()

const category = require('../data/category');
// const data = require('../data/data');
// const subCategory = require('../data/subcategory');

composer.hears('Ha ‚úÖ', async (ctx) => {
	await ctx.replyWithHTML(
		`
				<b>Iltimos bog‚Äôlanish uchun kontakt qoldiring</b>
			`,
		{
			reply_markup: JSON.stringify({
				force_reply: true,
				keyboard: [
					[
						{
							text: 'Kontakt jo‚Äônatish',
							request_contact: true,
							one_time_keyboard: true,
						},
					],
				],
				resize_keyboard: true,
			}),
		},
	);
});

composer.hears("Yo'q ‚ùå", async (ctx) => {
	await ctx.replyWithHTML(
		`
			<b>Agar kontakt qoldirmasangiz qayta a'loqa yo'lga quya olmaymiz!</b>
		`,
		{
			reply_markup: JSON.stringify({
				force_reply: true,
				keyboard: [
					[
						{
							text: 'Kontakt jo‚Äônatish',
							request_contact: true,
							one_time_keyboard: true,
						},
					],
				],
				resize_keyboard: true,
			}),
		},
	);
});

composer.hears('Yes ‚úÖ', async (ctx) => {
	await ctx.replyWithHTML(
		`
			<b>Please leave a contact to get in touch</b>
		`,
		{
			reply_markup: JSON.stringify({
				force_reply: true,
				keyboard: [
					[
						{
							text: 'Send Contact',
							request_contact: true,
							one_time_keyboard: true,
						},
					],
				],
				resize_keyboard: true,
			}),
		},
	);
});

composer.hears('No ‚ùå', async (ctx) => {
	await ctx.replyWithHTML(
		`
			<b>If you do not leave a contact, we will not be able to contact you again!</b>
		`,
		{
			reply_markup: JSON.stringify({
				force_reply: true,
				keyboard: [
					[
						{
							text: 'Send Contact',
							request_contact: true,
							one_time_keyboard: true,
						},
					],
				],
				resize_keyboard: true,
			}),
		},
	);
});

composer.hears('–î–∞ ‚úÖ', async (ctx) => {
	await ctx.replyWithHTML(
		`
			<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏</b>
		`,
		{
			reply_markup: JSON.stringify({
				force_reply: true,
				keyboard: [
					[
						{
							text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç',
							request_contact: true,
							one_time_keyboard: true,
						},
					],
				],
				resize_keyboard: true,
			}),
		},
	);
});

composer.hears('–ù–µ—Ç ‚ùå', async (ctx) => {
	await ctx.replyWithHTML(
		`
			<b>–ï—Å–ª–∏ –≤—ã –Ω–µ –æ—Å—Ç–∞–≤–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç, –º—ã –±–æ–ª—å—à–µ –Ω–µ —Å–º–æ–∂–µ–º —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è!</b>
		`,
		{
			reply_markup: JSON.stringify({
				force_reply: true,
				keyboard: [
					[
						{
							text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç',
							request_contact: true,
							one_time_keyboard: true,
						},
					],
				],
				resize_keyboard: true,
			}),
		},
	);
});

composer.hears("üá∫üáø O'zbekcha", async(ctx) => {
	ctx.lang = 'uz'
	await ctx.replyWithHTML(
		`
		<b>Til o'zgartirildi</b>
		`,
		{
			reply_markup: JSON.stringify({
				keyboard: category.uz_keyboard,
			}),
		},
	);
})

composer.hears("üá¨üáß English", async(ctx) => {
	ctx.lang = 'en'
	await ctx.replyWithHTML(
		`
		<b>The language has been changed</b>
		`,
		{
			reply_markup: JSON.stringify({
				keyboard: category.en_keyboard,
			}),
		},
	);
})

composer.hears("üá∑üá∫ –†—É—Å—Å–∫–∏–π", async(ctx) => {
	ctx.lang = 'ru'
	await ctx.replyWithHTML(
		`
		<b>–Ø–∑—ã–∫ –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω</b>
		`,
		{
			reply_markup: JSON.stringify({
				keyboard: category.ru_keyboard,
			}),
		},
	);
})

module.exports = composer