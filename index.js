const { Telegraf,  session } = require('telegraf')
require('dotenv').config()

const token = process.env.BOT_TOKEN
const bot = new Telegraf(token)

let lang = ''

bot.use(session())

bot.command('start', async (ctx) => {
	try {
			await ctx.replyWithHTML(`
		 <b>Tilni tanlang üá∫üáø </b>\n<b>Chouse language üá¨üáß</b>\n<b>–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ üá∑üá∫</b>
    `, {
		reply_markup: {
         inline_keyboard: [
            [
               {
                  text: 'üá∫üáø O\'zbekcha',
						callback_data: 'uz'
               },
               {
                  text: 'üá¨üáß English',
						callback_data: 'en'
               },
               {
                  text: 'üá∑üá∫ –†—É—Å—Å–∫–∏–π',
						callback_data: 'ru'
               }
            ]
         ],
         resize_keyboard: true
      }
	 })
	} catch (e) {
		console.error('cant handle start command', e)
	}
})

bot.on('callback_query', async (ctx) => {
	try {
		lang = ctx.update.callback_query.data
		if(lang == "uz"){
		await ctx.replyWithHTML(`
			<b>Salom ${ctx.from.first_name}, Xush kelibsiz</b>\n<b>Qayta a'loqa uchun To‚Äôliq ismingizni yozing!</b>
		`,{
			reply_markup: {
				force_reply: true
			}
		})
		}

		if(lang == "en"){
			await ctx.replyWithHTML(`
				<b>Hello ${ctx.from.first_name}, Welcome</b>\n<b>Please write your full name for contact back!</b>
			`,{
            reply_markup: {
               force_reply: true
            }
         })
		}

			if(lang == "ru"){
				await ctx.replyWithHTML(`
					<b>–ü—Ä–∏–≤–µ—Ç ${ctx.from.first_name}, –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å</b>\n<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –ø–æ–ª–Ω–æ–µ –∏–º—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏!</b>
				`,{
					reply_markup: {
						force_reply: true
					}
				})
			}
} catch (e) {
	console.error('cant handle start command', e)
}
})

bot.on('message', async (ctx) => {
	try {
		if(lang == "uz"){
			await ctx.replyWithHTML(`
				<b>Iltimos bog‚Äôlanish uchun kontak qoldiring</b>
			`,{
				reply_markup: JSON.stringify({
					force_reply: true,
					keyboard:
					[
						 [
							  {
									text: 'Kontakt jo‚Äônatish',
									request_contact: true,
									one_time_keyboard: true
							  }
						 ]
					],
					resize_keyboard: true
			  })		
		  })
			}
	
			if(lang == "en"){
				await ctx.replyWithHTML(`
					<b>Please leave a contact to get in touch</b>
				`,{
					reply_markup: JSON.stringify({
						force_reply: true,
						keyboard:
						[
							 [
								  {
										text: 'Send Contact',
										request_contact: true,
										one_time_keyboard: true
								  }
							 ]
						],
						resize_keyboard: true
				  })		
			  })
			}
	
				if(lang == "ru"){
					await ctx.replyWithHTML(`
						<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏</b>
					`,{
						reply_markup: JSON.stringify({
							force_reply: true,
							keyboard:
							[
								 [
									  {
											text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç',
											request_contact: true,
											one_time_keyboard: true
									  }
								 ]
							],
							resize_keyboard: true
					  })		
				  })
				}
		
} catch (e) {
	console.error('cant handle start command', e)
}
})

bot.launch().then(() => {
	console.log(`bot started on @${bot.options.username}`)
})
